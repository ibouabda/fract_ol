# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    test                                               :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: ibouabda <ibouabda@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/09/29 18:42:10 by ibouabda          #+#    #+#              #
#    Updated: 2019/09/30 17:51:01 by ibouabda         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "fractol.h"

void	ft_verifscreensize(t_env *e, int argc, char **argv)
{
	if (argc != 3)
	{
		ft_putendl(USAGE);
		exit(1);
	}
	e->winx = ft_atoi(argv[1]);
	e->winy = ft_atoi(argv[2]);
	if (e->winx < 400 || e->winy < 800 || e->winx > 2560 || e->winy > 1440)
	{
		ft_putendl(USAGE);
		exit(1);
	}
}

void mandelbroth(float x, float y, t_env *e)
{
	int k;
	float zi;
	float zn;
	float zi1;
	float zn1;

	k = 0;
	zi1 = y;
	zn1 = x;
	while (k < 15 && zi1 < 2 && zn1 < 2 && sqrt(zn1 * zn1 + zi1 *zi1))
	{
		zn = zn1;
		zi = zi1;
		zn1 = zn * zn - zi * zi + x;
		zi1 = 2 * zn * zi + y;
		k++;
	}
	// printf("zn1 = %f, zi1 = %f\n", zn1, zi1);
	if (zn1 >= 2 || zi1 >=2 || sqrt(zn1 * zn1 + zi1 * zi1) >= 2)
		ft_fill_pixel(x, y, e);
}

void julia(float x, float y, t_env *e)
{
	int k;
	float zi;
	float zn;
	float zi1;
	float zn1;

	k = 0;
	zi1 = y;
	zn1 = x;
	while (k < 15 && zi1 < 2 && zn1 < 2 && sqrt(zn1 * zn1 + zi1 *zi1))
	{
		zn = zn1;
		zi = zi1;
		zn1 = zn * zn - zi * zi + e->cn;
		zi1 = 2 * zn * zi + e->ci;
		k++;
	}
	// printf("zn1 = %f, zi1 = %f\n", zn1, zi1);
	if (zn1 >= 2 || zi1 >=2 || sqrt(zn1 * zn1 + zi1 * zi1) >= 2)
		ft_fill_pixel(x, y, e);
}

void cross_string(t_env *e)
{
	int x;
	int y;
	float x0;
	float y0;

	y = 0;
	while (y < e->winy)
	{
		x = 0;
		while (x < e->winx)
		{
			// if (y < 50)
			// 	dprintf(fd, "x0 = %f, y0 = %f\n", x0, y0);
			x0 = (float)(x - e->midx) / (float)e->convx;
			y0 = (float)(y - e->midy) / (float)e->convy;
			if (e->fract == 1)
				mandelbroth(x, y, e);
			else if (e->fract == 2)
				julia(x, y, e);
			x++;
		}
		y++;
	}
}

int		ft_key_hook(int keycode, t_env *e)
{
	if (keycode == ESC)
	{
		mlx_destroy_image(e->mlx_ptr,e->img_ptr);
		exit(0);
	}
		if (keycode == ONE)
	{
		e->fract = 1;
	}
	if (keycode == TWO)
	{
		e->fract = 2;
	}
	new_img(e);
	cross_string(e);
	mlx_put_image_to_window(e->mlx_ptr, e->win_ptr, e->img_ptr, 0, 0);
	return(0);
}

int main(int argc, char **argv)
{
	t_env e;
	int fd;

	fd = open("test", O_RDWR);
	ft_verifscreensize(&e, argc, argv);
	new_window(&e);
	img(&e);
	e.midx = e.winx/2;
	e.midy = e.winy/2;
	e.convx = e.midx / 2.35;
	e.convy = e.midy / 1.25;
	e.cn = 0;
	e.ci = 0;
	e.fract = 1;
	cross_string(&e);
	// ft_fill_pixel(100, 100, &e);
	mlx_put_image_to_window(e.mlx_ptr, e.win_ptr, e.img_ptr, 0, 0);
	mlx_hook(e.win_ptr, 2, (1 << 0), ft_key_hook, &e);
	mlx_loop(e.mlx_ptr);
	return(0);
}